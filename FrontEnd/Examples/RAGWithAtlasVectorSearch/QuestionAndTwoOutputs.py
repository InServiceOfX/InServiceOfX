from gradio.themes.base import Base

import gradio as gr

class QuestionAndTwoOutputs:
    """
    @url https://youtu.be/JEBDfGqrAUA?si=2LnEd5EgPb2E35i9&t=3062
    @ref Vector Search RAG Tutorial - Combine Your Data with LLMs with Advanced
    Search

    @url https://www.mongodb.com/developer/products/atlas/rag-atlas-vector-search-langchain-openai/
    @ref RAG with Atlas Vector Search, LangChain, and OpenAI, Harshad Dhavale
    """
    title = "Question Answering App using Vector Search + RAG"
    output_label1 = "Output with just Atlas Vector Search (returns text field as is):"
    output_label2 = "Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:"

    def __init__(self, query_data):
        self.query_data = query_data

    def create_GUI(self):

        # We have to use "with" with a large number of code because otherwise,
        # AttributeError: Cannot call click outside of a gradio.Blocks context.

        with gr.Blocks(theme=Base(), title=QuestionAndTwoOutputs.title) as gui:

            gr.Markdown(
                """
                # Question Answering App using Atlas Vector Search + RAG Architecture
                """)
            textbox = gr.Textbox(label="Enter your Question:")

            with gr.Row():
                button = gr.Button("Submit", variant="primary")
            with gr.Column():
                output1 = gr.Textbox(
                    lines=1,
                    max_lines=10,
                    label=QuestionAndTwoOutputs.output_label1)
                output2 = gr.Textbox(
                    lines=1,
                    max_lines=10,
                    label=QuestionAndTwoOutputs.output_label2)

            # Call query_data function upon clicking the Submit button

            button.click(self.query_data, textbox, outputs=[output1, output2])

            self.gui = gui

    def run(self, is_share=False, input_server_name=None):
        """
        @url https://www.gradio.app/docs/interface

        server_name str | None default: None - to make app accessible on local
        network, set this to "0.0.0.0". Can be set by environment variable
        GRADIO_SERVER_NAME. If None, will use "127.0.0.1."
        """
        if input_server_name == None:
            # Instead of 127.0.0.1, use 0.0.0.0 for local usage.
            self.gui.launch(share=is_share, server_name="0.0.0.0")
        else:
            self.gui.launch(share=is_share, server_name=input_server_name)
