# This Dockerfile is automatically generated by con(cat)enating textfiles. It's
# automatically concatenated by running a shell script (e.g.
# SetupPyTorchGPUDocker.sh) or doing something like, in command line,
# cat Dockerfile.header Dockerfile.base ..


# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html
# Also, see
# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch
# Check for the latest version on this page, on the left:
# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html
# Look for the PyTorch Release Notes.
# Also, try
# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch/tags
# and click on "Tags" on the top center for the different tags.

# As of March 26, 2024, there's 24.03.
# By doing nvcc --version, one can see that from 24.03, CUDA is 12.4. From
# 24.02, CUDA is 12.3.r12.3. For OpenCV and this issue, let's stay with < 12.4.
# Issue: https://github.com/opencv/opencv_contrib/issues/3690
# Furthermore, cudnnRNNForwardInference was removed in 9.0 of cuDNN:
# https://docs.nvidia.com/deeplearning/cudnn/api/overview.html
# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel-24-01.html
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# Set the working directory in the container
# https://docs.docker.com/engine/reference/builder/
ENV THIRD_PARTY=/ThirdParty
WORKDIR ${THIRD_PARTY}

ARG ARCH
ARG PTX

## Update apt, pip, and do pip installs.
RUN apt-get update && \
  apt-get install --upgrade -y ccache && \
  python -m pip install --upgrade pip && \
  #
  #
  # Do more pip installs.
  # Reads key-value pairs from .env file to set environment variables; in
  # particular for Open AI API keys for LangChain.
  pip install --upgrade python-dotenv && \
  #
  #
  # Install Poetry
  # https://python-poetry.org/docs/#installing-with-the-official-installer
  curl -sSL https://install.python-poetry.org | python3 - && \
  # https://python-poetry.org/docs/#installing-with-the-official-installer
  # Step 3, you have to add poetry to your PATH, which on UNIX is in
  # $HOME/.local/bin
  echo "export PATH=/root/.local/bin:$PATH" >> $HOME/.bashrc



# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
  # https://rust-lang.github.io/rustup/installation/index.html
  # export PATH once, doing both Rust and poetry binaries.
  echo "export PATH=/root/.cargo/bin:$PATH" >> $HOME/.bashrc



## HuggingFace

RUN python3 -m pip install --upgrade pip && \
  # Upgrading Jinja2 to 3.1 is needed to use apply_chat_template.
  pip install --upgrade jinja2 && \
  #
  #
## transformers (hugging face), required to run LLMs as models.
  git clone https://github.com/InServiceOfX/transformers.git /ThirdParty/transformers && \
  cd /ThirdParty/transformers && \
  git checkout master && \
  # Install editable install from source.
  # See https://huggingface.co/docs/transformers/installation#installing-from-source
  pip install -e . && \
  #
  #
## datasets (hugging face)
  git clone https://github.com/huggingface/datasets.git /ThirdParty/datasets && \
  cd /ThirdParty/datasets && \
  git checkout main && \
  pip install -e . && \
  #
  #
## accelerate - speeds up model loading for inference and training
  git clone https://github.com/huggingface/accelerate.git /ThirdParty/accelerate && \
  cd /ThirdParty/accelerate && \
  git checkout main && \
  pip install -e . && \
  #
  #
## candle (hugging face)
  git clone https://github.com/InServiceOfX/candle.git /ThirdParty/candle && \
  cd /ThirdParty/candle && \
  git checkout master && \
  #
  #
  # See Huggingface's transformers/src/transformers/pipelines/__init__.py for
  # def pipeline(..) where if config is None and isinstance(model, str) and case
  # when if is_peft_available().
  ## PEFT (Parameter-Efficient Fine-Tuning)
  git clone https://github.com/huggingface/peft /ThirdParty/peft && \
  cd /ThirdParty/peft && \
  pip install -e . && \
  #
  #
  cd /



## LangChain

### https://python.langchain.com/docs/get_started/introduction
### The LangChain libraries themselves are made up of several different packages
### and we'll install 3 of them:
### langchain: Chains, agents, and retrieval strategies that make up an
### application's cognitive architecture.
### langchain-core: Base abstractions and LangChain Expression Language.
### langchain-community: Third party integrations.

RUN git clone https://github.com/InServiceOfX/langchain.git /ThirdParty/langchain && \
  cd /ThirdParty/langchain/libs/langchain && \
  git checkout master && \
  # Install editable install from source.
  # See https://python.langchain.com/docs/get_started/installation
  pip install -e . && \
  cd ../core && \
  pip install -e . && \
  cd ../community && \
  pip install -e . && \
  # Install partners, which include Anthropic, Mistral AI, Open AI, etc.
  cd ../partners && \
  cd anthropic && \
  pip install -e . && \
  cd ../mistralai && \
  pip install -e . && \
  cd ../openai && \
  pip install -e . && \
  pip install -U --quiet langmem



