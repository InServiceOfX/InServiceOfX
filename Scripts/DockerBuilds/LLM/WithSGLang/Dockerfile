# This Dockerfile is automatically generated by con(cat)enating textfiles. It's
# automatically concatenated by running a shell script (e.g.
# SetupPyTorchGPUDocker.sh) or doing something like, in command line,
# cat Dockerfile.header Dockerfile.base ..


# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html
# Also, see
# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch
# Check for the latest version on this page, on the left:
# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html
# Look for the PyTorch Release Notes.
# Also, try
# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch/tags
# and click on "Tags" on the top center for the different tags.

# As of March 26, 2024, there's 24.03.
# By doing nvcc --version, one can see that from 24.03, CUDA is 12.4. From
# 24.02, CUDA is 12.3.r12.3. For OpenCV and this issue, let's stay with < 12.4.
# Issue: https://github.com/opencv/opencv_contrib/issues/3690
# Furthermore, cudnnRNNForwardInference was removed in 9.0 of cuDNN:
# https://docs.nvidia.com/deeplearning/cudnn/api/overview.html
# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel-24-01.html
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# Set the working directory in the container
# https://docs.docker.com/engine/reference/builder/
ENV THIRD_PARTY=/ThirdParty
WORKDIR ${THIRD_PARTY}

ARG ARCH
ARG PTX

## Update apt, pip, and do pip installs.
RUN apt-get update && \
  apt-get install --upgrade -y ccache && \
  python -m pip install --upgrade pip && \
  #
  #
  # Do more pip installs.
  # Reads key-value pairs from .env file to set environment variables; in
  # particular for Open AI API keys for LangChain.
  pip install --upgrade python-dotenv && \
  #
  #
  # Install Poetry
  # https://python-poetry.org/docs/#installing-with-the-official-installer
  curl -sSL https://install.python-poetry.org | python3 - && \
  # https://python-poetry.org/docs/#installing-with-the-official-installer
  # Step 3, you have to add poetry to your PATH, which on UNIX is in
  # $HOME/.local/bin
  echo "export PATH=/root/.local/bin:$PATH" >> $HOME/.bashrc



COPY BuildOpenCVWithCUDA.sh ${THIRD_PARTY}

# As of July 30, 2024, for OpenCV, there's 4.10.0.
# https://github.com/opencv/opencv/wiki/ChangeLog#version4100
# where CuDNN 9+ support, CUDA 12.4+ support.
# As of January 2025, for OpenCV there's 4.11.0.
# https://github.com/opencv/opencv/wiki/OpenCV-Change-Logs#version4110
# No CuDNN, CUDA version change.

ARG OPENCV_VERSION=4.11.0

ARG ARCH
ARG PTX

RUN pip uninstall -y opencv && \
  cd / && \
  # https://docs.opencv.org/4.x/d7/d9f/tutorial_linux_install.html
  # -q for quiet because output of wget with progress bars is too much.
  wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -O opencv.zip && \
  unzip opencv && \
  wget -q https://github.com/opencv/opencv_contrib/archive/refs/tags/${OPENCV_VERSION}.zip -O opencv_contrib.zip && \
  unzip opencv_contrib && \
  cd /opencv-${OPENCV_VERSION} && \
  /bin/bash ${THIRD_PARTY}/BuildOpenCVWithCUDA.sh ${ARCH} ${PTX} && \
  # This was done in one of the layers of the "original", NVIDIA PyTorch
  # Container for OpenCV
  cd /opencv-${OPENCV_VERSION}/modules/python/package && \
  pip install --no-cache-dir --disable-pip-version-check -v . && \
  cd / && \
  rm -rf /opencv-${OPENCV_VERSION} && \
  rm -rf /opencv_contrib-${OPENCV_VERSION} && \
  rm /opencv.zip && \
  rm /opencv_contrib.zip



# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
  # https://rust-lang.github.io/rustup/installation/index.html
  # export PATH once, doing both Rust and poetry binaries.
  echo "export PATH=/root/.cargo/bin:$PATH" >> $HOME/.bashrc



# See
# https://docs.sglang.ai/start/install.html#method-2-from-source
# TODO: Consider installing FlashInfer from source for AOT mode for production.
# https://docs.flashinfer.ai/installation.html

# Originally, the documentation said to install by cloning this specific version:
# git clone -b v0.4.2 https://github.com/sgl-project/sglang.git /ThirdParty/sglang
RUN git clone https://github.com/sgl-project/sglang.git /ThirdParty/sglang && \
    cd /ThirdParty/sglang && \
    git checkout main && \
    pip install --upgrade pip && \
    pip install sgl-kernel --force-reinstall --no-deps && \
    pip install -e "python[all]" --find-links https://flashinfer.ai/whl/cu124/torch2.4/flashinfer/ && \
    # If this isn't done, this is obtained:
    # WARNING 01-29 14:48:12 cuda.py:23] You are using a deprecated `pynvml` package. Please install `nvidia-ml-py` instead, and make sure to uninstall `pynvml`.
    pip uninstall -y pynvml && \
    pip install nvidia-ml-py




